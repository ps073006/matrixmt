/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 02 21:00:35 GMT 2019
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.LeastSquaresSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeastSquaresSolver_ESTest extends LeastSquaresSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 534, 534);
      LeastSquaresSolver leastSquaresSolver0 = null;
      try {
        leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 6, 6);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      leastSquaresSolver0.equations = 4;
      Vector vector0 = Vector.constant(4, 1546.32);
      // Undeclared exception!
      try { 
        leastSquaresSolver0.solve(vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(columnMajorSparseMatrix0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(2, 2);
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, 2);
      CompressedVector compressedVector1 = (CompressedVector)leastSquaresSolver0.solve(compressedVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertEquals(21, doubleArray0.length);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.5, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, columnMajorSparseMatrix0.columns());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertEquals(2.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2, leastSquaresSolver0.unknowns());
      assertEquals(2, leastSquaresSolver0.equations());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(209, 209);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(matrix0);
      Vector vector0 = leastSquaresSolver0.solve(denseVector0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotNull(vector0);
      assertFalse(vector0.equals((Object)
    		  denseVector0));
      assertEquals(209, denseVector0.length());
      assertEquals(1, matrix0.columns());
      assertEquals(209, matrix0.rows());
      assertEquals(209, leastSquaresSolver0.equations());
      assertEquals(1, leastSquaresSolver0.unknowns());
      assertEquals(1, vector0.length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(14);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(matrix0);
      // Undeclared exception!
      try { 
        leastSquaresSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can not be solved: coefficient matrix is rank deficient.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }
}
