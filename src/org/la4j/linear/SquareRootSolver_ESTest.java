/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 04 19:35:34 GMT 2019
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.SquareRootSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SquareRootSolver_ESTest extends SquareRootSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(16);
      Matrix matrix0 = columnMajorSparseMatrix0.add(281.0);
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(matrix0);
      SparseVector sparseVector0 = SparseVector.zero(16);
      Vector vector0 = sparseVector0.add(281.0);
      Vector vector1 = squareRootSolver0.solve(vector0);
      assertFalse(vector1.equals((Object)vector0));
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(16, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, columnMajorSparseMatrix0.columns());
      assertEquals(16, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0625, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix0.rows());
      assertEquals(16, squareRootSolver0.unknowns());
      assertEquals(16, squareRootSolver0.equations());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(16, sparseVector0.length());
      assertEquals(16, vector0.length());
      assertEquals(16, vector1.length());
      assertNotNull(vector1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
  }
}
