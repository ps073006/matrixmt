/*
 * This file was automatically generated by EvoSuite
 * Tue May 21 15:49:30 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.linear.SeidelSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.sparse.CompressedVector;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(15, 1972.451540155463);
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals(1972.451540155463, cRSMatrix0.max(), 0.01);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      SeidelSolver seidelSolver0 = (SeidelSolver)cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals(1972.451540155463, cRSMatrix0.max(), 0.01);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(15, seidelSolver0.equations());
      assertEquals(15, seidelSolver0.unknowns());
      assertNotNull(seidelSolver0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrixInverter0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 32);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      //doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.updateRow(0, vectorFunction0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(2, 3230, (-623.0));
      assertEquals(2, matrix0.rows());
      assertEquals(3230, matrix0.columns());
      assertNotNull(matrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      //doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(2, vectorFunction0);
      assertEquals(2, matrix0.rows());
      assertEquals(3230, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toDiagonalMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1698);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(1698, 1, mockRandom0);
      assertEquals(1, matrix0.columns());
      assertEquals(1698, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 32);
      assertEquals(32, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.transpose();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(32, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(32, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1698);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(1698, 1, mockRandom0);
      assertEquals(1, matrix0.columns());
      assertEquals(1698, matrix0.rows());
      assertNotNull(matrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transformRow(1337, vectorFunction0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(1, matrix0.columns());
      assertEquals(1698, matrix0.rows());
      assertEquals(1, matrix1.columns());
      assertEquals(1698, matrix1.rows());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1698);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(1698, 1, mockRandom0);
      assertEquals(1, matrix0.columns());
      assertEquals(1698, matrix0.rows());
      assertNotNull(matrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      //doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transformColumn(0, vectorFunction0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(1, matrix0.columns());
      assertEquals(1698, matrix0.rows());
      assertEquals(1698, matrix1.rows());
      assertEquals(1, matrix1.columns());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 1, 0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      //doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.randomSymmetric(16, mockRandom0);
      assertEquals(16, matrix0.rows());
      assertEquals(16, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(704, 704);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(704, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(704, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.trace();
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(704, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(704, cCSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      String string0 = columnMajorSparseMatrix0.toString();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(15, 1972.451540155463);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals(1972.451540155463, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.toSparseMatrix();
      assertSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals(1972.451540155463, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(15, cRSMatrix1.cardinality());
      assertEquals(1972.451540155463, cRSMatrix1.max(), 0.01);
      assertEquals(0.06666666666666667, cRSMatrix1.density(), 0.01);
      assertEquals(15, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(15, cRSMatrix1.columns());
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      assertEquals(2, doubleArray0.length);
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, vector0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      String string0 = rowMajorSparseMatrix0.toMatrixMarket();
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      assertEquals(2, doubleArray0.length);
      
      Vector vector0 = denseMatrix0.toColumnVector();
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, vector0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(2, 3230, (-623.0));
      assertEquals(2, matrix0.rows());
      assertEquals(3230, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      matrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      String string0 = denseMatrix0.toCSV();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      columnMajorSparseMatrix0.swapRows(304, 856);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      rowMajorSparseMatrix0.swapColumns(1233, 0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.sum();
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.subtract((Matrix) columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceBottomRight(819, 819);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad row argument 819; out of bounds
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[] doubleArray0 = new double[7];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertEquals(7, denseVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(7, doubleArray0.length);
      
      SparseVector sparseVector0 = SparseVector.zero(1402);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(1402, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      assertEquals(7, denseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(1402, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1402, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cCSMatrix0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      cCSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.shuffle();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(9, 10);
      assertEquals(9, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(10, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.setRow(9, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      rowMajorSparseMatrix0.setRow(0, 612.01859);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(5);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 6, mockRandom0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(5, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      denseMatrix0.setColumn(5, (double) 6);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(5, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.randomSymmetric(16, mockRandom0);
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix0.rows());
      assertNotNull(matrix0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2321);
      assertEquals(2321, denseMatrix0.columns());
      assertEquals(2321, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      denseMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.rotate();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.randomSymmetric(16, mockRandom0);
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.removeLastRow();
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix0.rows());
      assertEquals(16, matrix1.columns());
      assertEquals(15, matrix1.rows());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(6, 0);
      assertEquals(0, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.removeFirstRow();
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertEquals(5, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.randomSymmetric(16, mockRandom0);
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.removeLastColumn();
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix0.rows());
      assertEquals(15, matrix1.columns());
      assertEquals(16, matrix1.rows());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal column number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 612.01859;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertArrayEquals(new double[] {612.01859, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = denseMatrix0.rank();
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertArrayEquals(new double[] {612.01859, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 2095);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int int0 = denseMatrix0.rank();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = denseMatrix0.rank();
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.product();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.power(1293);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 32);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.power((-1913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1913.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      double double0 = matrix0.norm();
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(2, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(29, 0, doubleArray0);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(29, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sparseMatrix0);
      assertEquals(5, doubleArray0.length);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.multiplyByItsTranspose();
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(29, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(29, cRSMatrix0.rows());
      assertEquals(29, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cRSMatrix0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      Vector vector0 = Vector.fromCSV("");
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      Vector vector1 = rowMajorSparseMatrix0.multiply(vector0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, vector0.length());
      assertEquals(0, vector1.length());
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
  }

 /* @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1230, 1230);
      assertEquals(1230, matrix0.rows());
      assertEquals(1230, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      matrix0.power(1230);
  }*/

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(85);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(85, 85, mockRandom0);
      assertEquals(85, matrix0.columns());
      assertEquals(85, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      matrix0.multiply((double) 85);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(0, 10, mockRandom0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.divide(0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

 /* @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("\n", decimalFormatSymbols0);
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertNotNull(decimalFormat0);
      
      String string0 = columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertEquals("", string0);
      assertNotNull(string0);
  }*/

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(15, 1972.451540155463);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(1972.451540155463, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      String string0 = cRSMatrix0.mkString("Index '", "];#iOE{e");
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(1972.451540155463, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1361, 1361, 1361);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1361, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1361, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn((-2057));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2057' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      assertEquals(6, doubleArray0.length);
      
      double double0 = denseMatrix0.min();
      assertEquals(6, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.maxInRow(0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(1494, 2653, 2653);
      assertEquals(2653, matrix0.columns());
      assertEquals(1494, matrix0.rows());
      assertNotNull(matrix0);
      
      double double0 = matrix0.maxInColumn(17);
      assertEquals(2653, matrix0.columns());
      assertEquals(1494, matrix0.rows());
      assertEquals(2653.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      assertEquals(0, doubleArray0.length);
      
      double double0 = denseMatrix0.max();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(704, 704);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(704, cCSMatrix0.columns());
      assertEquals(704, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      cCSMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      assertEquals(2, doubleArray0.length);
      
      DenseMatrix denseMatrix1 = DenseMatrix.unit(1, 32);
      assertEquals(1, denseMatrix1.rows());
      assertEquals(32, denseMatrix1.columns());
      assertNotNull(denseMatrix1);
      
      Matrix matrix0 = denseMatrix1.kroneckerProduct(denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertNotSame(matrix0, denseMatrix1);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix1.rows());
      assertEquals(32, denseMatrix1.columns());
      assertEquals(32, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 17, 17);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      boolean boolean0 = columnMajorSparseMatrix0.is(matrixPredicate0);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(48, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      assertEquals(7, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 7. Should be: 32.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      assertEquals(7, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(7, denseVector0.length());
      assertEquals(32, vector0.length());
      assertFalse(vector0.equals((Object)denseVector0));
      assertNotNull(vector0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.insertColumn(7, vector0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(7, denseVector0.length());
      assertEquals(32, vector0.length());
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(33, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(denseVector0.equals((Object)vector0));
      assertFalse(vector0.equals((Object)denseVector0));
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getColumn(32);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(7, denseVector0.length());
      assertEquals(32, vector0.length());
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(33, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertFalse(denseVector0.equals((Object)vector0));
      assertFalse(vector0.equals((Object)denseVector0));
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(compressedVector0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.insertRow(0, compressedVector0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(7, denseVector0.length());
      assertEquals(32, vector0.length());
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(33, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(32, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(33, cCSMatrix1.rows());
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertFalse(denseVector0.equals((Object)vector0));
      assertFalse(vector0.equals((Object)denseVector0));
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertFalse(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      assertEquals(7, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn(7, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal column number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      assertEquals(7, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn(7, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 7. Should be: 32.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1698);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(1698, 1, mockRandom0);
      assertEquals(1, matrix0.columns());
      assertEquals(1698, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.insert(matrix0, 0, 1, 1698, 0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(1, matrix0.columns());
      assertEquals(1698, matrix0.rows());
      assertEquals(1698, matrix1.rows());
      assertEquals(1, matrix1.columns());
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-948.8462502608531));
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix0, 0, (-2084), 2268, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2268, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.insert(matrix0, 0, (-1), (-1), 37, 1483, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1, 37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1698);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(1698, 1, mockRandom0);
      assertEquals(1698, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.insert(matrix0, 1, 1, 1698, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1698 rows and 0 cols at 1, 1 in a 1698x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, (-4391), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -4391x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.infinityNorm();
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1172);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1172, cRSMatrix0.cardinality());
      assertEquals(1172, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1172, cRSMatrix0.columns());
      assertEquals(8.532423208191126E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 17, 17);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      columnMajorSparseMatrix0.hashCode();
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(17, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 17, 17);
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.hadamardProduct(denseMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      assertEquals(17, matrix0.columns());
      assertEquals(17, matrix0.rows());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 37);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("        ");
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromCSV("t.i{ {5%7jsr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(2, matrix0.rows());
      assertEquals(6, matrix0.columns());
      assertNotNull(matrix0);
      assertEquals(2, doubleArray0.length);
      
      Matrix matrix1 = matrix0.subtract(0.0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(2, matrix0.rows());
      assertEquals(6, matrix0.columns());
      assertEquals(2, matrix1.rows());
      assertEquals(6, matrix1.columns());
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Matrix matrix0 = Matrix.from1DArray(0, 0, (double[]) null);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 17, 17);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(17, denseMatrix0.columns());
      assertEquals(17, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      boolean boolean0 = columnMajorSparseMatrix0.equals((Matrix) denseMatrix0, (double) 17);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(17, denseMatrix0.columns());
      assertEquals(17, denseMatrix0.rows());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstColumn();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(32, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(31, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      boolean boolean0 = columnMajorSparseMatrix0.equals((Object) cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(32, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(31, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 15, 856);
      assertEquals((-12), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = rowMajorSparseMatrix0.equals((Object) byteArrayInputStream0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals((-12), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      boolean boolean0 = denseMatrix0.equals((Object) denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(7, 0, 32, 664);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad column argument 663; out of bounds
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray((-22), (-22), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -22x-22
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertEquals(4, denseVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      assertEquals(4, doubleArray0.length);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(4, denseVector0.length());
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(matrix0);
      assertEquals(4, doubleArray0.length);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      //doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray1 = matrix0.foldRows(vectorAccumulator0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, denseVector0.length());
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      assertEquals(4, doubleArray0.length);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      //doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray1 = denseMatrix0.foldColumns(vectorAccumulator0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 17, 17);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(17, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(17, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      // Undeclared exception!
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      DenseVector denseVector0 = DenseVector.zero(0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      double double0 = matrix0.determinant();
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(32, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstColumn();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(32, cRSMatrix1.rows());
      assertEquals(31, cRSMatrix1.columns());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-948.8462502608531));
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(2268);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(2268, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1069, 1069);
      assertEquals(1069, rowMajorSparseMatrix0.rows());
      assertEquals(1069, rowMajorSparseMatrix0.cardinality());
      assertEquals(1069, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(9.354536950420954E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1069.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.copyOfColumns(1069);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(1069, rowMajorSparseMatrix0.rows());
      assertEquals(1069, rowMajorSparseMatrix0.cardinality());
      assertEquals(1069, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(9.354536950420954E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1069.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1069, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9.354536950420954E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1069, cRSMatrix0.columns());
      assertEquals(1069.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1069, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = rowMajorSparseMatrix0.columnMajorIterator();
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.blankOfRows(0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.randomSymmetric(16, mockRandom0);
      assertEquals(16, matrix0.rows());
      assertEquals(16, matrix0.columns());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.blankOfColumns(0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(16, matrix0.rows());
      assertEquals(16, matrix0.columns());
      assertEquals(16, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.add((Matrix) columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, (Random) null);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.minInRow(0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }
}
