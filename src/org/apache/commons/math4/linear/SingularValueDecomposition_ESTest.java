/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 08 17:22:26 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.ArrayRealVector;
import org.apache.commons.math4.linear.BlockRealMatrix;
import org.apache.commons.math4.linear.DefaultRealMatrixChangingVisitor;
import org.apache.commons.math4.linear.DefaultRealMatrixPreservingVisitor;
import org.apache.commons.math4.linear.DiagonalMatrix;
import org.apache.commons.math4.linear.OpenMapRealMatrix;
import org.apache.commons.math4.linear.OpenMapRealVector;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealMatrixChangingVisitor;
import org.apache.commons.math4.linear.RealMatrixPreservingVisitor;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.linear.SingularValueDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecomposition_ESTest extends SingularValueDecomposition_ESTest_scaffolding {

 /* @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3368.14741);
      doubleArray0[3] = (-882.9368);
      doubleArray0[3] = 317.6278808725;
      doubleArray0[4] = 317.6278808725;
      doubleArray0[5] = 317.6278808725;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      array2DRowRealMatrix0.walkInOptimizedOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getSubMatrix(302, 0, 3, 2);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      singularValueDecomposition0.getSolver();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.001891313810924);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1.001891313810924));
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(blockRealMatrix0);
      singularValueDecomposition0.getCovariance(0.0);
      arrayRealVector0.iterator();
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(openMapRealVector0);
      RealMatrix realMatrix1 = array2DRowRealMatrix0.subtract(realMatrix0);
      arrayRealVector0.sparseIterator();
      array2DRowRealMatrix0.preMultiply(realMatrix1);
      arrayRealVector0.ebeMultiply(openMapRealVector0);
      double double0 = (-90.0);
  }*/
  @Test(timeout = 4000)
  public void testmod0()  throws Throwable  {
	  double[] doubleArray0 = new double[7];
      doubleArray0[0] = 479.93754753532;
      doubleArray0[1] = 2.220446049250313E-16;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4276.007316200578;
      doubleArray0[4] = 4276.007316200578;
      doubleArray0[5] = 4865.703412728138;
      doubleArray0[6] = 4865.703412728138;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getSolver();
      //diagonalMatrix0.transpose();
      RealMatrix realMatrix0 = singularValueDecomposition0.getUT();
      DecompositionSolver singularValueDecomposition_Solver0 = new SingularValueDecomposition(realMatrix0).getSolver();
      RealMatrix resultInitial = singularValueDecomposition_Solver0.solve(realMatrix0);
	  
      assertEquals(7, doubleArray0.length);
      assertNotNull(diagonalMatrix0);
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(7, diagonalMatrix0.getColumnDimension());
      assertEquals(7, diagonalMatrix0.getRowDimension());
      assertArrayEquals(new double[] {479.93754753532,2.220446049250313E-16, 0.0,4276.007316200578,4276.007316200578,4865.703412728138,4865.703412728138}, doubleArray0, 0.01);
      
      assertEquals(7, doubleArray0.length);
      assertNotNull(singularValueDecomposition_Solver0);
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(7, diagonalMatrix0.getColumnDimension());
      assertEquals(7, diagonalMatrix0.getRowDimension());
      assertTrue(singularValueDecomposition_Solver0.isNonSingular());
      assertArrayEquals(new double[] {479.93754753532,2.220446049250313E-16, 0.0,4276.007316200578,4276.007316200578,4865.703412728138,4865.703412728138}, doubleArray0, 0.01);
      
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(7, diagonalMatrix0.getColumnDimension());
      assertEquals(7, diagonalMatrix0.getRowDimension());
      assertTrue(singularValueDecomposition_Solver0.isNonSingular());
      assertArrayEquals(new double[] {479.93754753532,2.220446049250313E-16, 0.0,4276.007316200578,4276.007316200578,4865.703412728138,4865.703412728138}, doubleArray0, 0.01);
	}
  @Test(timeout = 4000)
  public void testmod1()  throws Throwable  {
	  RealVector resultInitialVector = null;
	  double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-935.545609043);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3426.5);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1103.7020248578);
      doubleArray0[6] = 6.283185307179586;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      RealMatrix realMatrix0 = diagonalMatrix0.copy();
      DecompositionSolver singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0).getSolver();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      resultInitialVector = singularValueDecomposition0.solve((RealVector) arrayRealVector0);
    	
        assertEquals(7, doubleArray0.length);
	    assertNotNull(diagonalMatrix0);
	    assertEquals(7, diagonalMatrix0.getRowDimension());
	    assertFalse(diagonalMatrix0.isTransposable());
	    assertEquals(7, diagonalMatrix0.getColumnDimension());
	    assertArrayEquals(new double[] {0.0,-935.545609043,0.0,-3426.5, 0.0,-1103.7020248578,6.283185307179586}, doubleArray0, 0.01);
	    
	    assertNotNull(singularValueDecomposition0);
	    //assertTrue(singularValueDecomposition0.isNonSingular());
	    
	    assertNotSame(arrayRealVector0, resultInitialVector);
	    assertNotSame(resultInitialVector, arrayRealVector0);
	    assertNotNull(resultInitialVector);
	    assertFalse(resultInitialVector.equals((Object)arrayRealVector0));
	    assertFalse(arrayRealVector0.isInfinite());
	    assertEquals(7, arrayRealVector0.getDimension());
	    assertFalse(arrayRealVector0.isNaN());
	    assertEquals(7, resultInitialVector.getDimension());
	    assertFalse(resultInitialVector.isInfinite());
	    assertFalse(resultInitialVector.isNaN());
	}
 /* @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 479.93754753532;
      doubleArray0[1] = 2.220446049250313E-16;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4276.007316200578;
      doubleArray0[4] = 4276.007316200578;
      doubleArray0[5] = 4865.703412728138;
      doubleArray0[6] = 4865.703412728138;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      diagonalMatrix0.getNorm();
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getSolver();
      diagonalMatrix0.transpose();
      RealMatrix realMatrix0 = singularValueDecomposition0.getUT();
      singularValueDecomposition0.getS();
      singularValueDecomposition0.getS();
      singularValueDecomposition0.getCovariance(479.93754753532);
      singularValueDecomposition0.getSolver();
      singularValueDecomposition0.getV();
      singularValueDecomposition0.getSingularValues();
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, diagonalMatrix0, realMatrix0, false, 0.0);
      singularValueDecomposition_Solver0.solve(realMatrix0);
      singularValueDecomposition0.getInverseConditionNumber();
  }*/

 /* @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2806;
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (-2707.147943974951);
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, false);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      singularValueDecomposition0.getRank();
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix((-2869), 2806);
      SingularValueDecomposition singularValueDecomposition1 = new SingularValueDecomposition(blockRealMatrix0);
      ArrayRealVector arrayRealVector0 = null;
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,869 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }*/

 /* @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3426.5);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1103.7020248578);
      doubleArray0[6] = 6.283185307179586;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      RealMatrix realMatrix0 = diagonalMatrix0.copy();
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      RealMatrix realMatrix1 = singularValueDecomposition0.getCovariance(2.0);
      singularValueDecomposition0.getVT();
      singularValueDecomposition0.getConditionNumber();
      singularValueDecomposition0.getVT();
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, diagonalMatrix0, realMatrix1, true, (-3426.5));
      singularValueDecomposition_Solver0.isNonSingular();
      singularValueDecomposition0.getU();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      singularValueDecomposition0.getRank();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      singularValueDecomposition_Solver0.solve((RealVector) arrayRealVector1);
      singularValueDecomposition0.getSolver();
  }

 /* @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 10;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(10, 10);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(openMapRealMatrix0);
      singularValueDecomposition0.getUT();
      openMapRealMatrix0.power(0);
      singularValueDecomposition0.getVT();
      singularValueDecomposition0.getCovariance(10);
      // Undeclared exception!
      try { 
        singularValueDecomposition0.getSolver();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cutoff singular value is 10, should be at most 0
         //
         verifyException("org.apache.commons.math4.linear.SingularValueDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.6033346880071782E-291;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 0.3936265707015991;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.5;
      doubleArray0[1] = doubleArray2;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4, 4);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(openMapRealMatrix1);
      singularValueDecomposition0.getCovariance(2.0);
      singularValueDecomposition0.getSolver();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1577.04035345361;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(1577.04035345361);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      singularValueDecomposition0.getConditionNumber();
      singularValueDecomposition0.getNorm();
      RealMatrix realMatrix1 = singularValueDecomposition0.getU();
      boolean boolean0 = false;
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, array2DRowRealMatrix0, realMatrix1, false, 1577.04035345361);
      int int0 = 117;
      int int1 = (-790);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int1);
      int int2 = (-1025);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 9.370340069010866E-12;
      doubleArray0[1] = 2.450710800645073E-13;
      doubleArray0[2] = 0.07073719799518585;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getSolver();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-3030.31678643913));
      doubleArray0[0] = double0;
      Double double1 = new Double((-2398.82513524796));
      doubleArray0[1] = double1;
      Double double2 = new Double(0.031);
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = (-2398.82513524796);
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = (double) doubleArray0[0];
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = (double) doubleArray0[2];
      doubleArray1[7] = (double) doubleArray0[0];
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray1);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(arrayRealVector0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      singularValueDecomposition0.getCovariance((-3030.31678643913));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(openMapRealVector1);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      singularValueDecomposition0.getUT();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1741.745666466);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 811.3;
      doubleArray0[3] = 3605.5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1163.43;
      doubleArray0[6] = 1862.6365;
      doubleArray0[7] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      singularValueDecomposition0.getRank();
  }*/
/*
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1139.1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1883.6763608);
      doubleArray0[3] = 0.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getVT();
      singularValueDecomposition0.getSolver();
      singularValueDecomposition0.getRank();
      RealMatrix realMatrix0 = singularValueDecomposition0.getVT();
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, realMatrix0, realMatrix0, false, 0.0);
      singularValueDecomposition_Solver0.solve(realMatrix0);
      singularValueDecomposition_Solver0.solve((RealVector) null);
      singularValueDecomposition0.getV();
      singularValueDecomposition0.getS();
  }

 /* @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-955.19708);
      doubleArray0[2] = 1538.305007453;
      doubleArray0[3] = 270.61941224528;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getS();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[3];
      RealMatrix realMatrix0 = array2DRowRealMatrix0.createMatrix(2, 299);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      singularValueDecomposition0.getCovariance((-2447.70298));
      double[] doubleArray1 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (-633.86));
      SingularValueDecomposition singularValueDecomposition1 = new SingularValueDecomposition(array2DRowRealMatrix0);
      singularValueDecomposition1.getRank();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1254.47502329;
      doubleArray0[1] = (-1334.7);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = singularValueDecomposition0.getUT();
      singularValueDecomposition0.getSolver();
      singularValueDecomposition0.getCovariance(1254.47502329);
      singularValueDecomposition0.getS();
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, realMatrix0, realMatrix0, true, 2.0);
      int int0 = (-1617);
      singularValueDecomposition_Solver0.solve((RealMatrix) array2DRowRealMatrix0);
      array2DRowRealMatrix0.setRow(int0, doubleArray0);
      int int1 = 4;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-257.438);
      doubleArray0[0] = (-257.438);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double double1 = (-2.0);
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, diagonalMatrix0, diagonalMatrix0, false, (-2.0));
      singularValueDecomposition_Solver0.solve((RealMatrix) diagonalMatrix0);
      singularValueDecomposition_Solver0.isNonSingular();
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getSolver();
      double double2 = 1761.67995397;
      singularValueDecomposition0.getVT();
      double double3 = 1086.9017056978207;
      singularValueDecomposition0.getCovariance(1086.9017056978207);
      // Undeclared exception!
      try { 
        singularValueDecomposition0.getUT();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cutoff singular value is 1,086.902, should be at most 257.438
         //
         verifyException("org.apache.commons.math4.linear.SingularValueDecomposition", e);
      }
  }*/

 /* @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-935.545609043);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3426.5);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1103.7020248578);
      doubleArray0[6] = 6.283185307179586;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      RealMatrix realMatrix0 = diagonalMatrix0.copy();
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      RealMatrix realMatrix1 = singularValueDecomposition0.getCovariance(2.0);
      singularValueDecomposition0.getVT();
      double double0 = singularValueDecomposition0.getConditionNumber();
      singularValueDecomposition0.getVT();
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, diagonalMatrix0, realMatrix1, true, (-3426.5));
      singularValueDecomposition_Solver0.isNonSingular();
      singularValueDecomposition0.getU();
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(4970, 4970);
      RealVector realVector0 = blockRealMatrix0.getColumnVector(4970);
      singularValueDecomposition_Solver0.solve(realVector0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      singularValueDecomposition_Solver0.solve((RealVector) arrayRealVector1);
      singularValueDecomposition0.getSolver();
  }*/

 /* @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition.Solver singularValueDecomposition_Solver0 = new SingularValueDecomposition.Solver(doubleArray0, array2DRowRealMatrix0, array2DRowRealMatrix0, true, (-1.0));
      singularValueDecomposition_Solver0.getInverse();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 10;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(10, 10);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(openMapRealMatrix0);
      singularValueDecomposition0.getUT();
      openMapRealMatrix0.power(0);
      singularValueDecomposition0.getVT();
      singularValueDecomposition0.getVT();
      singularValueDecomposition0.getInverseConditionNumber();
      openMapRealMatrix0.getData();
      double double0 = 0.0;
      singularValueDecomposition0.getCovariance(0.0);
      singularValueDecomposition0.getSolver();
      singularValueDecomposition0.getV();
      singularValueDecomposition0.getInverseConditionNumber();
      openMapRealMatrix0.walkInColumnOrder((RealMatrixChangingVisitor) null, 10, 10, 1953, 10);
      singularValueDecomposition0.getCovariance(double0);
      singularValueDecomposition0.getInverseConditionNumber();
      double double1 = 6.283185307179586;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-305.3132007150948);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getInverseConditionNumber();
      singularValueDecomposition0.getRank();
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      diagonalMatrix0.walkInOptimizedOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 1, 298, 1, 1);
      singularValueDecomposition0.getInverseConditionNumber();
      int int0 = 10;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-3030.31678643913));
      doubleArray0[0] = double0;
      Double double1 = new Double((-2398.82513524796));
      doubleArray0[1] = double1;
      Double double2 = new Double(0.031);
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = (-2398.82513524796);
      doubleArray1[4] = (double) doubleArray0[0];
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = (double) doubleArray0[2];
      doubleArray1[7] = (double) double1;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray1);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(arrayRealVector0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      singularValueDecomposition0.getCovariance((-3030.31678643913));
  }*/
}
