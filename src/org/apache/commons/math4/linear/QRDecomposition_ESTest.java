/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 08 16:59:21 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.ArrayRealVector;
import org.apache.commons.math4.linear.BlockRealMatrix;
import org.apache.commons.math4.linear.DecompositionSolver;
import org.apache.commons.math4.linear.DiagonalMatrix;
import org.apache.commons.math4.linear.OpenMapRealVector;
import org.apache.commons.math4.linear.QRDecomposition;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QRDecomposition_ESTest extends QRDecomposition_ESTest_scaffolding {

 /* @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray1, doubleArray0, 3.141592653589793);
      assertNotNull(qRDecomposition_Solver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        qRDecomposition_Solver0.solve((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular: 0 is smaller than the minimum (3.142): index (0)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition$Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray0, doubleArray0[1], 1613.01614);
      assertNotNull(qRDecomposition_Solver0);
      assertEquals(8, doubleArray0.length);
      
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(52);
      assertNotNull(diagonalMatrix0);
      assertEquals(52, diagonalMatrix0.getColumnDimension());
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(52, diagonalMatrix0.getRowDimension());
      
      // Undeclared exception!
      try { 
        qRDecomposition_Solver0.solve((RealMatrix) diagonalMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 52 != 7
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition$Solver", e);
      }
  }*/

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = new double[11][8];
      doubleArray1[0] = doubleArray0;
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray1, doubleArray0, (-2332.376534698));
      assertNotNull(qRDecomposition_Solver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)qRDecomposition_Solver0.solve((RealMatrix) array2DRowRealMatrix0);
      assertNotNull(blockRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(11, blockRealMatrix0.getRowDimension());
      assertEquals(1, blockRealMatrix0.getColumnDimension());
      assertEquals(7, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-364.0859343743173);
      doubleArray1[1] = 9.4221;
      doubleArray1[2] = (-3464.4680862236);
      doubleArray0[0] = doubleArray1;
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray0, doubleArray1, 0.0);
      assertNotNull(qRDecomposition_Solver0);
      assertArrayEquals(new double[] {(-364.0859343743173), 9.4221, (-3464.4680862236)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (-2089.5296));
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-364.0859343743173), 9.4221, (-3464.4680862236)}, doubleArray1, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealVector realVector0 = qRDecomposition_Solver0.solve((RealVector) openMapRealVector0);
      assertNotNull(realVector0);
      assertArrayEquals(new double[] {(-364.0859343743173), 9.4221, (-3464.4680862236)}, doubleArray1, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.isNaN());
      assertEquals(4, realVector0.getDimension());
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

 /* @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[7];
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray0, doubleArray1, 0.0);
      assertNotNull(qRDecomposition_Solver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, false);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        qRDecomposition_Solver0.solve((RealVector) arrayRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition$Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray0, doubleArray0[0], 2356.6052);
      assertNotNull(qRDecomposition_Solver0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = qRDecomposition_Solver0.isNonSingular();
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[11][8];
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray1, doubleArray0, (-2332.376534698));
      assertNotNull(qRDecomposition_Solver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      boolean boolean0 = qRDecomposition_Solver0.isNonSingular();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      assertNotNull(qRDecomposition0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)qRDecomposition0.getH();
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(8, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)qRDecomposition0.getH();
      assertNotNull(array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix2.isTransposable());
      assertEquals(8, array2DRowRealMatrix2.getRowDimension());
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(7, doubleArray0.length);
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      assertNotNull(qRDecomposition0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(7, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)qRDecomposition0.getQ();
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(7, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(7, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)qRDecomposition0.getQ();
      assertNotNull(array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(7, array2DRowRealMatrix2.getColumnDimension());
      assertFalse(array2DRowRealMatrix2.isTransposable());
      assertEquals(7, array2DRowRealMatrix2.getRowDimension());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      assertNotNull(diagonalMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, diagonalMatrix0.getColumnDimension());
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(3, diagonalMatrix0.getRowDimension());
      assertEquals(3, doubleArray0.length);
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0, 1.0);
      assertNotNull(qRDecomposition0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, diagonalMatrix0.getColumnDimension());
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(3, diagonalMatrix0.getRowDimension());
      assertEquals(3, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)qRDecomposition0.getR();
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, diagonalMatrix0.getColumnDimension());
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(3, diagonalMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, doubleArray0.length);
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0, 0.0);
      assertNotNull(qRDecomposition0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(3, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)qRDecomposition0.getR();
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertTrue(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(3, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)qRDecomposition0.getR();
      assertNotNull(array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertTrue(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, array2DRowRealMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix2.isTransposable());
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(3, array2DRowRealMatrix2.getRowDimension());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1915.237);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-1915.237), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(8, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)array2DRowRealMatrix0.transpose();
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {(-1915.237), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(8, doubleArray0.length);
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix1);
      assertNotNull(qRDecomposition0);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {(-1915.237), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 629.9297221487707;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {629.9297221487707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(7, doubleArray0.length);
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      assertNotNull(qRDecomposition0);
      assertArrayEquals(new double[] {629.9297221487707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(7, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)qRDecomposition0.getQ();
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {629.9297221487707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(7, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      double[] doubleArray1 = new double[6];
      QRDecomposition.Solver qRDecomposition_Solver0 = new QRDecomposition.Solver(doubleArray0, doubleArray1, 5.0);
      assertNotNull(qRDecomposition_Solver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        qRDecomposition_Solver0.getInverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition$Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      assertNotNull(qRDecomposition0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)qRDecomposition0.getQ();
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)qRDecomposition0.getQT();
      assertNotNull(array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
      assertFalse(array2DRowRealMatrix2.isTransposable());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(6, 6);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0, 6);
      assertNotNull(qRDecomposition0);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = qRDecomposition0.getSolver();
      assertNotNull(decompositionSolver0);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
  }*/
}
